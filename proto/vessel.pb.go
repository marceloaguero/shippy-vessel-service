// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/vessel.proto

/*
Package go_micro_srv_vessel is a generated protocol buffer package.

It is generated from these files:
	proto/vessel.proto

It has these top-level messages:
	Vessel
	Specification
	Response
*/
package go_micro_srv_vessel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Vessel struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Capacity  int32  `protobuf:"varint,2,opt,name=capacity" json:"capacity,omitempty"`
	MaxWeight int32  `protobuf:"varint,3,opt,name=max_weight,json=maxWeight" json:"max_weight,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Available bool   `protobuf:"varint,5,opt,name=available" json:"available,omitempty"`
	OwnerId   string `protobuf:"bytes,6,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
}

func (m *Vessel) Reset()                    { *m = Vessel{} }
func (m *Vessel) String() string            { return proto.CompactTextString(m) }
func (*Vessel) ProtoMessage()               {}
func (*Vessel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Vessel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Vessel) GetCapacity() int32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *Vessel) GetMaxWeight() int32 {
	if m != nil {
		return m.MaxWeight
	}
	return 0
}

func (m *Vessel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Vessel) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *Vessel) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

type Specification struct {
	Capacity  int32 `protobuf:"varint,1,opt,name=capacity" json:"capacity,omitempty"`
	MaxWeight int32 `protobuf:"varint,2,opt,name=max_weight,json=maxWeight" json:"max_weight,omitempty"`
}

func (m *Specification) Reset()                    { *m = Specification{} }
func (m *Specification) String() string            { return proto.CompactTextString(m) }
func (*Specification) ProtoMessage()               {}
func (*Specification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Specification) GetCapacity() int32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *Specification) GetMaxWeight() int32 {
	if m != nil {
		return m.MaxWeight
	}
	return 0
}

type Response struct {
	Vessel  *Vessel   `protobuf:"bytes,1,opt,name=vessel" json:"vessel,omitempty"`
	Vessels []*Vessel `protobuf:"bytes,2,rep,name=vessels" json:"vessels,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetVessel() *Vessel {
	if m != nil {
		return m.Vessel
	}
	return nil
}

func (m *Response) GetVessels() []*Vessel {
	if m != nil {
		return m.Vessels
	}
	return nil
}

func init() {
	proto.RegisterType((*Vessel)(nil), "go.micro.srv.vessel.Vessel")
	proto.RegisterType((*Specification)(nil), "go.micro.srv.vessel.Specification")
	proto.RegisterType((*Response)(nil), "go.micro.srv.vessel.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VesselService service

type VesselServiceClient interface {
	FindAvailable(ctx context.Context, in *Specification, opts ...grpc.CallOption) (*Response, error)
}

type vesselServiceClient struct {
	cc *grpc.ClientConn
}

func NewVesselServiceClient(cc *grpc.ClientConn) VesselServiceClient {
	return &vesselServiceClient{cc}
}

func (c *vesselServiceClient) FindAvailable(ctx context.Context, in *Specification, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/go.micro.srv.vessel.VesselService/FindAvailable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VesselService service

type VesselServiceServer interface {
	FindAvailable(context.Context, *Specification) (*Response, error)
}

func RegisterVesselServiceServer(s *grpc.Server, srv VesselServiceServer) {
	s.RegisterService(&_VesselService_serviceDesc, srv)
}

func _VesselService_FindAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Specification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselServiceServer).FindAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.vessel.VesselService/FindAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselServiceServer).FindAvailable(ctx, req.(*Specification))
	}
	return interceptor(ctx, in, info, handler)
}

var _VesselService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.vessel.VesselService",
	HandlerType: (*VesselServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAvailable",
			Handler:    _VesselService_FindAvailable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vessel.proto",
}

func init() { proto.RegisterFile("proto/vessel.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x75, 0x0b, 0x94, 0x32, 0x06, 0x0f, 0xe3, 0x65, 0x45, 0x49, 0x9a, 0x9e, 0x38, 0xad, 0x09,
	0xc4, 0x0f, 0xf0, 0x62, 0xa2, 0xc7, 0x62, 0xf4, 0x48, 0x96, 0xed, 0x88, 0x93, 0xd0, 0x6e, 0xd3,
	0x6d, 0x0a, 0xfe, 0x8d, 0x9f, 0x6a, 0xb2, 0x15, 0x0c, 0xa6, 0xd1, 0xdb, 0xbc, 0xb7, 0x6f, 0x5e,
	0xde, 0xbc, 0x05, 0x2c, 0x2b, 0x5b, 0xdb, 0xdb, 0x86, 0x9c, 0xa3, 0xad, 0xf2, 0x00, 0x2f, 0x37,
	0x56, 0xe5, 0x6c, 0x2a, 0xab, 0x5c, 0xd5, 0xa8, 0xf6, 0x29, 0xf9, 0x14, 0x10, 0xbe, 0xf8, 0x11,
	0x2f, 0x20, 0xe0, 0x4c, 0x8a, 0x58, 0xcc, 0x46, 0x69, 0xc0, 0x19, 0x4e, 0x20, 0x32, 0xba, 0xd4,
	0x86, 0xeb, 0x0f, 0x19, 0xc4, 0x62, 0x36, 0x48, 0x8f, 0x18, 0xa7, 0x00, 0xb9, 0xde, 0xaf, 0x76,
	0xc4, 0x9b, 0xf7, 0x5a, 0xf6, 0xfc, 0xeb, 0x28, 0xd7, 0xfb, 0x57, 0x4f, 0x20, 0x42, 0xbf, 0xd0,
	0x39, 0xc9, 0xbe, 0x37, 0xf3, 0x33, 0xde, 0xc0, 0x48, 0x37, 0x9a, 0xb7, 0x7a, 0xbd, 0x25, 0x39,
	0x88, 0xc5, 0x2c, 0x4a, 0x7f, 0x08, 0xbc, 0x82, 0xc8, 0xee, 0x0a, 0xaa, 0x56, 0x9c, 0xc9, 0xd0,
	0x6f, 0x0d, 0x3d, 0x7e, 0xcc, 0x92, 0x27, 0x18, 0x2f, 0x4b, 0x32, 0xfc, 0xc6, 0x46, 0xd7, 0x6c,
	0x8b, 0x93, 0x60, 0xe2, 0xcf, 0x60, 0xc1, 0xaf, 0x60, 0x49, 0x03, 0x51, 0x4a, 0xae, 0xb4, 0x85,
	0x23, 0x5c, 0x40, 0xd8, 0x96, 0xe0, 0x4d, 0xce, 0xe7, 0xd7, 0xaa, 0xa3, 0x20, 0xd5, 0x96, 0x93,
	0x7e, 0x4b, 0xf1, 0x0e, 0x86, 0xed, 0xe4, 0x64, 0x10, 0xf7, 0xfe, 0xdb, 0x3a, 0x68, 0xe7, 0x04,
	0xe3, 0x96, 0x5a, 0x52, 0xd5, 0xb0, 0x21, 0x7c, 0x86, 0xf1, 0x03, 0x17, 0xd9, 0xfd, 0xb1, 0x80,
	0xa4, 0xd3, 0xe7, 0xe4, 0xf0, 0xc9, 0xb4, 0x53, 0x73, 0x38, 0x28, 0x39, 0x5b, 0x87, 0xfe, 0xa7,
	0x17, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x78, 0x7e, 0x51, 0xc4, 0xff, 0x01, 0x00, 0x00,
}
